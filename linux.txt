"!" can be used with any command to invoke previous run of that command.

Read more: http://javarevisited.blogspot.com/2011/03/10-find-command-in-unix-examples-basic.html#ixzz2YuNeznNo

grep -c "search_term" file (print number of search_term in file)

sed:
sed 's/reg of content to be substituted/reg of content to substitute/' < oldfile > newfile               /g: global replacement


tr: translate
tr '[a-z]' '[A-Z]'


sort
sort -n (sorting based on numeric value of string)
sort -k2 (sort by some column)
ps -ef | sort -nk2 (sort based upon numeric value of PID)
sort -r option (reverse sorting)
sort -u (produce sorted output without duplicates, or using sort|uniq)

uniq


split

join

display : display an image on any workstation running X 


awk -F "," '{print NF}' filename | uniq -c  #Get row number and column number of a comma separated file
awk -F "," '{print $1}' filename  #Print the first column of a comma separated file
awk -F "," '{if($1=="whatever") print $1}' filename


#list the contents of a tar file:
tar -tvf file.tar

#List the contents of a tar.gz file:
tar -ztvf file.tar.gz

#List the contents of a tar.bz2 file:
tar -jtvf file.tar.bz2


# When file list is large, use cat will fail, need to use find as following:
find folder -name "*.log" | xargs cat  > fpath

xargs can be used to do whatever witch each file found by find command
find . -name "*.tmp" -print | xargs rm â€“f (delete all  .tmp files)


find . -mtime 1  (find all the files modified exact 1 day)
find . -mtime +1  (find all the files modified more than 1 day)
find . -mtime -1  (find all the files modified less than 1 day)


######screen
screen -X -S [session # you want to kill] quit   # kill a screen
Remove dead? screen: screen -wipe
Detached screen: screen -D screen#
Detach from curren screen: Ctrl + a + d
create new window:  Ctrl + a + c
change to next window in list: Ctrl + a + p
change to next window in list: Ctrl + a + n

# Convert eps file to jpg file
convert -density 100 -antialias -background white -units PixelsPerInch -quality 100 file.eps file.jpg

# see logs of cron jobs
grep CRON /var/log/syslog

# get today's epoch
date +%s
date -d "$(date +%Y-%m-%d)" +%s
# get previous day's epoch
date -d "1 day ago $(date +%Y-%m-%d)" +%s
