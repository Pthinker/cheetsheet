You do not need to have root access to a machine to install your own versions of R and your favourite packages there. This is how to do it:
1. downloaded the tar.gz of the development version of R
2. uncompress it to a directory you have write access to, say ~/local/R
3. change into the uncompressed directory, ~/local/R/R-devel
4. run "./configure"
5. run "make"
Afterwards you can start R by executing ~/local/R/R-devel/bin/R; to simplify that either add the bin directory to your path or create an alias for R.
You do not need to run "make install" to work with R. For packages,
    1. create a directory in which you want the packages installed, e.g. ~/local/rpacks
    2. create an evironment variable R_LIBS that holds the path to that directory, e.g. "setenv R_LIBS ${HOME}/local/rpacks" with that directory
       and a C-shell (use export with a Bash shell). This environment variable tells R where to look first for installed packages and where to 
       install packages when using "install.packages" or "biocLite". R_LIBS is safe to use, since it only extends the path to look for packages
       and does not replace the default R library path.


# To run an R script from linux command line:
R CMD BATCH file.R #output will be in generated file.Rout file
or
Rscript file.R #output to console

------------------------------------------------------------------------

paste() to cancatenate string
any()
all()
tolower()
toupper()
strsplit()
merge(): merge two data frames
sort()
order(): can be used to order data frame based on one or more than one column values

--------------------------------------------------------------------------------------------------------------------------------------------------------

Everything in R is object. Atomic classes: numeric, logical, integer, character and complex. Numbers in R is generally treated as numeric objects(double precision real numbers). If you explicitly want an integer, you need to specify the L suffix.

: is to create an integer sequence. i.e. 1:20

class() function can get the type of an object, i.e., class(a).

c() function is to create vectors of ojects. i.e., x<-c("a","b","c")

vector() function is to create a vector, i.e., x<-vector("numeric", length=10), default to 0.

length() returns the length of a vector.

Every element in a vector need to be in the same class. When different objects are mixed in vector, coerce will happen so that every element in the vector is of the same class.

Objects can be explicitly coerced from one class to another using the as.* function if available. Nonsensical coercion results in NAs.

Matrices are vectors with a dimension attribute. The dimension attributes is itself an integer vector of length 2 (nrow, ncol).
m<-matrix(1:6, nrow=2, ncol=3)
dim(m) : get the dimension of the matrix
attributes(m): return the attributes of a matrix.
Matrices can also be created directly from vectors by adding a dimension attribute.
m<-1:10
dim(m) <- c(2, 5)
Matrices are constructed column-wise. Matrices can be created by column-binding or row-binding with cbind() and rbind().
a<-1:3
b<-10:12
cbind(a, b)

Lists are a special type of vector that can contain different classes of elements. i.e., x<-list(1, "a", TRUE)

Factors are used to represent categorical data. One can think of a factor as an integer vector where each integer has a label.
f=factor(c("yes","no","yes","yes"))
table(f): get a frequency count of each level in the factor

Missing values are denoted by NA or NaN. is.na() is used to test objects if they are NA, is.nan() is used to test for NaN. A NaN value is also NA, but the reverse is not true.

Data frames are used to store tabular data. They are represented as a special type of list where each element of the list has to have the same length. Each element of the list can be thought of as a column cand the length of each element of the list is the number of rows. Unlike matrices, data frames can store different classes of objects in each column. Data frames have a special attribute called row.names. Data frames are usually created by calling read.table() or read.csv(). Data frames can be converted to a matrix by calling data.matrix() but coverse may happen so each element is of the same class.
x<-data.frame(col1=1:4. col2=c(T,F,F,T))
nrow(x):get number of rows
ncol(x): get number of columns

R objects can have names. 
x<-1:3
names(x) <- c("name1", "name2", "name3")
names(x)

Lists can have names. l <- list(a=1, b=2, c=3)
names(l)

Matrices can have names:
m <- matrix(1:4, nrow=2, ncol=2)
dimnames(m) <- list(c("a", "b"), c("c", "d")) # The first element in the list is row names.

----------------------------------------

[ always returns an object of the same class as the original, can be used to select more than one elements. [[ is used to extract elements of a list or a data framel, it can only be used to extract a single element and the class of the returned object will not necessarily be a list or a data frame. $ is used to extract elements of a list or data frame by name, sementics are similar to that of [[. 
x <- matrix(1:6, 2, 3)
x[1, 2]
x[1, ] # first row of the matrix
x[, 2] # second column of the matrix

x <- list(foo=1:4, bar=0.6)
x[1] # a list, [ always return the object with the same class
x[[1]] # a vector

complete.cases() 

Many operations in R are vectorized making code more efficient, concise, and easier to read.

x <- matrix(1:4, 2, 2)
y <- matrix(rep(10, 4), 2, 2)
x * y  # element-wise multiplication
x %*% y  # true matrix multiplication

----------------------------------------

read.table, read.csv, for reading tabular data (help page of read.table contains many useful hints)
Use the colClasses argument can make read.table run much faster. If all of the columns are numeric, you can just set colClasses="numeric". A quick and dirty way to figure out the classes of each column is the following:
iniital <- read.table("datatable.txt", nrows=100)
classes <- sapply(initial, class)
tabAll <- read.table("datatable.txt", colClasses=classes)

readLines, for reading lines of text files
con <- gzfile("words.gz")
x <- readLines(con, 10)
writeLines takes a character vector and writes each element one line at a time to a text file.

source, for reading in R code files
load, for reading in saved workspaces

file() opens a connection to a file
gzfile() opens a connection to a file compressed with gzip
bzfile() ............................................ bzip2
url() opens a connection to a webpage

getwd(): get the current working directory.

dir(): list files in current working directory.
str(): compactly display the internal structure of an object
ls(): list objects
head(): display top lines

------------------------------------------

# for loop:
for(i in 1:10) {
    print(i)
}

# while loop
z<-5
while(z>=3 && z<=10) {
    z<-z+1
}

# repeat loop: the only way to exit a repeat is to call break
repeat {
    break
}

next is used to skip an iteration of a loop

--------------------------------------------

functions are created using the function() directive and are stored as R object just like anything else. Functions can be passed as arguments to other functions and functions can be nested. The return value of a function is the last expression in the function body.

args(function_name): print function arguments

The ... argument indicate a variable number of arguments that are usually passed on to other functions. 
(1) ... if often used when extending another function and you don't want to copy the entire argument list of original function
myplot <- function(x, y, type="1", ...) {
    plot(x, y, type, ...)
}
(2) Generic functions use ... so that extra arguments can be passed to functions.
(3) ... is also necessary when the number of arguments passed to the function cannot be known in advance
One catch with ... is that any argument that appear after ... on the argument must be named explicitly and cannot be partially matched.

-------------------------------------------

Loop functions:

lapply: Loop over a list and evaluate a function on each element. lapply always returns a list.

sapply: Same to lapply but try to simply the result. If the result is a list where every element if length 1, then a vector is returned. If the result is a list where every element is a vector of the same length(>1), a matrix is returned. If it cannot figure out, a list is returned. 
rowSums = apply(x, 1, sum)
rowMeans = apply(x, 1, mean)
colSums = apply(x, 2, sum)
colMeans = apply(x, 2, mean)

apply: apply a function over the margins of an array. It's often used to apply a function to the rows or columns of a matrix. 
tapply: apply a function over subsets of a vector
mapply: multivariate version of lapply

An auxilary function split is also useful, particularly in conjunction with lapply.

---------------------------------------------
# Generating random numbers:
rnorm: generate random normal variates with a given mean and standard deviation
dnorm: evaluate the Normal probability density at a point (or vector of points)
pnorm: evaluate the cumulative distribution function for a Normal distribution
rpois: generate random Poisson variates with a given rate
rbinom: generate random binomial variates 

Setting the random number seed with set.seed ensures reproducibility

The sample function draws randomly from a specified set of (scalar) objects allowing you to sample from arbitrary distributions.

---------------------------------------------

# Plotting:

The par function is used to specify global graphics parameters that affect all plots in an R session. These parameters can often be overridden as arguments to specific plotting functions. 
    pch: the plotting symbol (default in open circle)
    lty: the line type(default is solid line)
    lwd: the line width, specified as an integer
    col: the plotting color, specified as a number, string or hex code
    las: the orientation of the axis labels on the plot
    bg: the background color
    mar: the margin size
    oma: the outer margin size
    mfrow: number of plots per row, column (plots are filled row-wise)
    mfcol: number of plots per row, column (plots are filled column-wise)
par(mfrow=c(2,5)) # a plot with 2 rows and 5 columns


plot: make a scatterplot, or other type of plots depending on the class of the object being plotted
lines: add lines to a plot, given a vector x values and a corresponding vector of y values (or a 2 column matrix). it just connects the dots
points: add points to a plot
text: add text labels to a plot using specified x, y coordinates
title: add annotations to x, y axis labels, title, subtitle, outer margin
mtext: add arbitrary text to the margins(inner or outer) of the plot
axis: adding axis ticks/labels
legend: add legend to plot

The list of devices can be found using ?Devices command

pdf(file = "testRplot.pdf")
x <- rnorm(100)
hist(x)
dev.off()

dev.copy: copy a plot from one device to another
dev.copy2pdf: copy a plot to a PDF file
dev.list: show the list of open graphics devices
dev.next: switch control to the next graphics device on the device list
dev.set: set control to a specific graphics device
dev.off: close the current graphics device

R can produce latex-like symbols on a plot for mathematical annotation. Math symbols are "expression" in R and need to be wrapped in the expression function. There is a set list of allowed symbols and this is documented in ?plotmath. 

?par
?plot
?plotmath
?axis

colors() function lists the names of colors you can use in any plotting function.
rgb() funtion can be used to product any color via read, green, blue proportions, and color transparency can be added via the alpha parameter to rgb. Transparency can sometimes be used to clasify plots with many points.

--------------------------------------------------

# Dates and times in R

Dates are represented by the Date class, stored internally as the number of days since 1970-01-01
Times are represented by the POSIXct or the POSIXlt class, stored internally as the number of seconds since 1970-01-01

Dates can be coerced from a character string using the as.Date() function.

# generic functions that work on dates and times
weekdays() gives the day of the week
months() gives the month name
quarters() gives the quarter number("Q1", "Q2", etc)

Times can be coerced from a character string using as.POSIXlt or as.POSIXct function

x <- Sys.time() # x in POSIXct class
p <- as.POSIXlt(x)
p$sec

strptime() function can be used to convert string of different format to time
datestring <- c("January 10, 2012 10:40")
x <- strptime(datestring, "%B %d, %Y %H:%M")
?strptime for details

You can use mathematical operations on dates and times and you can do comparisons too.

--------------------------------------------------

# Regular expression in R

grep(), grepl(): search for matches of a regular expression/patters in a character vector, either return the indices into the character vector that match, the strings that happen to match, or a TRUE/FALSE vector indicating which element match. By default, grep return indices into the character vector where the regex pattern matches. Setting value=TRUE returns the actual elements of the character vector that match. grepl returns a logical vector indicting which element matches.

regexpr(), gregexpr(): search a character vector for regular expression matches and return the indices of the string where the match begins and the length of the match. regexpr only gives you the first match of the string. gregexpr will give you all of the matches.

regmatches() extracts the matches in the string.

sub(), gsub(): search a character vector for regular expression matches and replace that match with another string

regexec() works like regexpr except it gives you the indices for parenthesized sub-expressions. 

--------------------------------------------------

hclust(): Hierarchical clustering
# Example:
dataFrame <- data.frame(x=x, y=y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)

kmeans(): kmeans clustering
# Example
dataFrame <- data.frame(x=x, y=y)
kmeansObj <- kmeans(dataFrame, centers=3)
plot(x, y, col=kmeansObj$cluster, pch=19, cex=2)
points(kmeansObj$centers, col=1:3, pch=3, cex=3, lwd=3)

# Dimension reduction
svd(): singular value decomposition.
prcomp(): principal components analysis.

